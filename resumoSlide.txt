Aula 1:

Slide 1: Introdução ao SCM: Explica a importância da Gerência e Configuração de Software (SCM) e seus conceitos principais como controle de mudança e controle de versão.
Slide 2: O que é Software?: Define software como um conjunto de instruções e artefatos, diferenciando artefatos para usuários e desenvolvedores.
Slide 3: Por que SCM é importante?: Detalha os desafios de gerenciar artefatos e mudanças em softwares, como garantir versões estáveis e usar ferramentas adequadas.
Slide 4: História do SCM: Discute a origem do SCM nos anos 50, voltada para produções militares, e sua evolução para normas internacionais a partir dos anos 80.
Slide 5: Conceitos-chave: Introduz termos como item de configuração, baseline e auditoria de configuração, que são essenciais para o gerenciamento eficaz de software.
Slide 6: Impacto do SCM: Apresenta quem é afetado pelo SCM, incluindo desenvolvedores, gerentes e designers.
Slide 7: Controle de Mudança: Introduz o conceito de controle de mudança, que gerencia e autoriza alterações no software para manter sua estabilidade.
Slide 8: Issue Tracking: Descreve o uso de sistemas de rastreamento de tarefas (issues) com atributos como título, descrição e status.
Slide 9: Milestones e Comitês: Explica como milestones agrupam issues e a função do comitê de controle de mudança para aprovar ou rejeitar alterações.
Slide 10: Controle de Versão: Enfatiza a importância de controlar as versões de um software, mencionando ferramentas como Git.
Slide 11: Diretório de Trabalho e Repositório: Introduz o conceito de diretório de trabalho (arquivos do projeto) e repositório (histórico de versões e modificações).
Slide 12: Conclusão: Reforça a necessidade de usar controle de versão e mudança para evitar conflitos e garantir a rastreabilidade do software.

Aula 2:

Slide 1: Introdução ao Git: Apresenta o Git como o sistema de controle de versão mais usado no mundo, criado em 2005 e de código aberto.
Slide 2: Instalação do Git: Instruções de como baixar e instalar o Git, incluindo o comando para verificar a versão instalada.
Slide 3: O que é GitHub?: Introduz o GitHub como uma plataforma de hospedagem de código-fonte que usa Git para controle de versão, permitindo projetos públicos e privados.
Slide 4: Integração GitHub com VSCode: Explica como integrar o GitHub com o editor VSCode para gerenciar o controle de código diretamente na interface.
Slide 5: Conceitos Importantes do Git: Introduz termos essenciais como repositório local, diretório de trabalho, área intermediária (staging) e repositório remoto.
Slide 6: Configuração do Git: Ensina como configurar o nome e e-mail do usuário para commits usando os comandos git config --global.
Slide 7: Criando Repositórios Locais e Remotos: Mostra como criar repositórios no GitHub e no computador usando os comandos git init e git clone.
Slide 8: Adicionando e Removendo Arquivos: Explica os comandos para adicionar arquivos à área de staging (git add) e removê-los (git rm --cached).
Slide 9: Criando Commits: Descreve como criar commits com o comando git commit -m e a importância de fornecer uma mensagem descritiva.
Slide 10: Atualizando Repositórios: Explica os comandos git pull e git push para sincronizar repositórios locais e remotos.
Slide 11: Desfazendo Mudanças: Apresenta comandos como git reset e git revert para desfazer mudanças ou reverter commits.
Slide 12: Trabalhando com Branches: Ensina como criar e navegar entre branches usando git branch, git checkout, e como realizar merges com git merge.
Slide 13: Merge e Rebase: Discute a diferença entre merge e rebase, duas formas de combinar mudanças entre branches.
Slide 14: Resolução de Conflitos: Mostra como resolver conflitos de merge, com opções como git merge --abort para cancelar a operação.
Slide 15: Boas Práticas de Commit: Sugere práticas como usar títulos curtos, explicações claras e commits coesos.
Slide 16: Workflows: Introduz workflows de desenvolvimento como centralizado, feature branches e fluxo com bifurcação (fork).